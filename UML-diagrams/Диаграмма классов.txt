@startuml
' Settings
skinparam classAttributeIconSize 0
hide empty members
left to right direction

package "Robot (C++)" {
  class GPIOController {
    - gpio_pins: std::vector<int>
    - gpio_chip_fd: int
    --
    - gpio_write(offset: int, value: uint8_t): void
    --
    + GPIOController()
    + forward(time_ms: int): void
    + stop(): void
    + right(time_ms: int): void
    + left(time_ms: int): void
    + ~GPIOController()
  }

  class MqttGpioReceiver {
    - mosq_: struct mosquitto*
    - topic_: const char*
    - last_gpio_data_ptr_: std::atomic<std::shared_ptr<const std::string>>
    - thread_: std::thread
    - running_: std::atomic<bool>
    --
    - {static} message_callback(mosq: struct mosquitto*, obj: void*, msg: const struct mosquitto_message*): void
    - loop(): void
    --
    + MqttGpioReceiver(host: const char*, port: int, topic: const char*)
    + ~MqttGpioReceiver()
    + get_gpio_data(): std::string
  }

  class GpioProcessor {
    - gpio_: GPIOController&
    - receiver_: MqttGpioReceiver&
    --
    + GpioProcessor(gpio: GPIOController&, receiver: MqttGpioReceiver&)
    + run(): void
  }

  note "main() function instantiates these classes:\nGPIOController\nMqttGpioReceiver\nGpioProcessor" as MainNote
  GpioProcessor .. MainNote
}

package "Server (Python)" {
  class RobotControlSystem {
    - broker_ip: str
    - port: int
    - robot_topic: str
    - client: mqtt.Client
    - cap: cv2.VideoCapture
    - window_name: str
    - running: bool
    - vision_enabled: bool
    - show_camera: bool
    - front: tuple
    - back: tuple
    - target: tuple
    --
    + __init__()
    + initialize_camera(): cv2.VideoCapture
    + on_connect(client, userdata, flags, reason_code, properties): void
    + send_gpio_command(command: str): void
    + process_frame(): bool
    + draw_detections(frame): void
    + find_center(mask): tuple
    + get_angle_to_target(): float
    + get_distance_to_target(): float
    + vision_control_loop(): void
    + start(): void
    + shutdown(signum=None, frame=None): void
    + cleanup(): void
  }
  note "main script instantiates RobotControlSystem" as PyMainNote
  RobotControlSystem .. PyMainNote
}

' Relationships
GpioProcessor o-- GPIOController
GpioProcessor o-- MqttGpioReceiver

MqttGpioReceiver ..> "<<library>>\nmosquitto" : uses
GPIOController ..> "<<library>>\nlinux/gpio.h" : uses

RobotControlSystem ..> "<<library>>\npaho.mqtt.client" : uses
RobotControlSystem ..> "<<library>>\ncv2 (OpenCV)" : uses
RobotControlSystem ..> "<<library>>\nnumpy" : uses

' Communication between systems
RobotControlSystem ..> MqttGpioReceiver : "MQTT\n(robot/gpio topic)"

@enduml
